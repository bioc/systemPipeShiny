% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spsUIcollections.R
\name{dynamicFile}
\alias{dynamicFile}
\title{dynamically generate select file input
depending on the mode in options, render similar UI but server side works
differently. `local` mode will not copy file, directly use a path pointer,
`server` mode upload file and store in temp. Expect similar behavior as
`fileInput`.}
\usage{
dynamicFile(
  id,
  title = "Select your file:",
  label = "Browse",
  icon = NULL,
  style = "",
  multiple = FALSE
)
}
\arguments{
\item{id}{element id}

\item{title}{element title}

\item{label}{upload button label}

\item{icon}{button icon, only works for `local` mode}

\item{style}{additional button style, only works for `local` mode}

\item{multiple}{multiple files allowed
`shinyFilesButton`}
}
\value{
div
}
\description{
dynamically generate select file input
depending on the mode in options, render similar UI but server side works
differently. `local` mode will not copy file, directly use a path pointer,
`server` mode upload file and store in temp. Expect similar behavior as
`fileInput`.
}
\examples{
library(shiny)
library(shinyFiles)
library(shinyjs)
options(sps = list(mode='server'))
ui <- fluidPage(
useShinyjs(),
dynamicFile("getFile"),
textOutput("txt_file")
)

server <- function(input,output,session){
    runjs('$(".sps-file input").attr("readonly", true)')
    myfile <- dynamicFileServer(input,session, id = "getFile")
    observe({
        print(myfile())
    })
}
shinyApp(ui = ui, server = server)
}
