% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spsCoreServer.R
\name{spsValidator}
\alias{spsValidator}
\title{Validate some inputs}
\usage{
spsValidator(validate_list, args = list(), title = "Validation")
}
\arguments{
\item{validate_list}{a list of function which are in a named list and only
returns a single value of TRUE or FALSE. this return value needs to be named.
This return name will be used as error message.}

\item{args}{a \code{named}(very important) list of arguments that will be used in
different function in  \code{validate_list}. \code{...} argument is not supported.
Positional args will not work either.
Have to specify the name of argument, position argument also is not working.}

\item{title}{Title of this validator}
}
\value{
if any validation function returns FALSE, a error pop-up will show
in the shiny app.
}
\description{
Useful to check if a input dataframe, list or other things
meet the requirement. If any validation fails, it will show a pop-up message
and block any further code execution, similar to \code{shiny::req()}
}
\examples{
if(interactive()){
    library(systemPipeShiny)
    df_validate_common <- list(
        vd1 = function(df, apple){
            print(apple)
            if (is(df, "data.frame")) {result <- c(" " = TRUE)}
            else {result <- c("Input is not dataframe or tibble" = FALSE)}
            return(result)
        },
        vd2 = function(df, banana, orange="orange"){
            print(banana)
            print(orange)
            # change < to > in next line to see failure
            if (nrow(df) < 10) {result <- c(" " = TRUE)}
            else {result <- c("Need more than 10 rows" = FALSE)}
            Sys.sleep(1)
            return(result)
        }
    )
    ui <- fluidPage(
        actionButton("btn", "this btn")
    )
    server <- function(input, output, session) {
        observeEvent(input$btn, {
            spsValidator(df_validate_common,
                         args = list(df = data.frame(),
                                     apple = "apple",
                                     banana = "banana"))
            print(123)
        })
    }
    shinyApp(ui, server)
}
}
