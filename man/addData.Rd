% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spsServerCollections.R
\name{addData}
\alias{addData}
\alias{getData}
\title{Add and get data between SPS tabs}
\usage{
addData(data, shared, tab_id)

getData(tab_id, shared)
}
\arguments{
\item{data}{any type of R object you want to store and use in other tabs}

\item{shared}{the a \code{shared} reactivevalues object that is defined on the top
level server. Read vignette for more details about this object}

\item{tab_id}{tab ID of current tab if using \code{addData} method and tab
ID to get data from if using \code{getData}.}
}
\value{
Nothing to return with \code{add} method and returns original object for
the \code{get} method
}
\description{
These functions are designed to be used inside SPS tabs
}
\examples{
if(interactive()){
    spsInit()
    options(sps = list(verbose = TRUE))
    ui <- fluidPage(
        useToastr(),
        actionButton("add", "add"),
        actionButton("get", "get"),
        actionButton("wrong", "when it gets wrong")
    )
    server <- function(input, output, session) {
        shared <- reactiveValues()
        data <- dplyr::tibble(this = 123)
        cat('before adding\n')
        print(shared)
        observeEvent(input$add, {
            addData(data, shared, "core_about")
            cat('after adding\n')
            print(shared) # watch the data_intask object is created
        })
        observeEvent(input$get, {
            cat("get data\n")
            print(getData('core_about', shared))
        })
        observeEvent(input$wrong, {
            cat("get wrong data\n")
            getData('not_there', shared)
        })
    }
    shinyApp(ui, server)
}
}
