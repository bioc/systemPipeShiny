% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spsServerCollections.R
\name{dynamicFileServer}
\alias{dynamicFileServer}
\title{Server side function for dynamicFile}
\usage{
dynamicFileServer(input, session, id, roots = c(root = "default"))
}
\arguments{
\item{input}{shiny server input}

\item{session}{shiny server session}

\item{id}{input file element ID.
Do not us \code{ns()} to wrap the id on server side if inside module}

\item{roots}{a named character vector, paths where users can reach
on the server, so only required for "server" mode, default is
current directory + all system volumes. You can lock users to a specific path,
so they are not allowed to browse parent folders.
like only current directory: \code{c(current=getwd())}; a temp folder:
\code{c(current=tempdir())}; unlimited: \code{c(shinyFiles::getVolumes()())}}
}
\value{
reactive dataframe, need to extract the value inside reactive
expression, observe, or inside \code{isolate}
}
\description{
Server side function for \link{dynamicFile} to parse the uploaded
file path
}
\examples{
if(interactive()){
    library(shinyjs)
    options(sps = list(mode='server')) # Change the mode to 'local' to see difference
    ui <- fluidPage(
        useShinyjs(),
        dynamicFile("getFile"),
        textOutput("txt_file")
    )

    server <- function(input,output,session){
        runjs('$(".sps-file input").attr("readonly", true)')
        myfile <- dynamicFileServer(input, session, id = "getFile")
        observe({
            print(myfile()) # remember to use `()` for reactive value
        })
    }
    shinyApp(ui = ui, server = server)
}
}
