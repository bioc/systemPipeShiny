% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spsNewtab.R
\name{makePrepro}
\alias{makePrepro}
\title{Create data tab preprocess methods}
\usage{
makePrepro(
  method_id = "md1",
  label = "New method1",
  vd_expr = spsValidate(is.data.frame(data_filtered)),
  pre_expr = {     data_filtered },
  plot_options = "default",
  use_string = FALSE
)
}
\arguments{
\item{method_id}{string, length 1, a unique ID within this data tab.}

\item{label}{string, length 1, what label to display on UI for users to
choose as a preprocess option}

\item{vd_expr}{expression, usually a \link{spsValidate} object. Before preprocess
if there is any additional validation that is special to this preprocess
method, you can specify here}

\item{pre_expr}{The actual preprocess expression. You should use
a pre-created variable called \emph{data_filtered} to start and this is the
object that contains filtered data after users filtering on the UI. In the
end of this expression, you should return a preprocessed dataframe or
whatever object type that can be accepted by the desired plot tab. It is
recommended to write the preprocess method into a function and directly use
the function here, e.g.\preformatted{myPreprocess <- function(data)\{
    if(is.numeric(data[ ,1]))
        data[ ,1] <- data[ ,1] + 1
    return(data)
\}
makePrepro(
 ...,
 pre_expr = myPreprocess(data_filtered),
 ...
)
}}

\item{plot_options}{plot tab IDs: if data is preprocessed by this method,
what kind of plots can it make, specify plot tab IDs in a vector. Note:
unlike the \code{receive_datatab_ids} argument in \link{makePlotData} that requires
the \emph{config/tabs.csv} exists, this argument doesn't require the config file
or the plot tab to be existing. One can use any ID(s) here. The ID checking
is postponed when the \link{genGallery} function runs on app start. "default"
means all possible plot tabs, the same as \code{type = 'plot'} in \link{genGallery}.}

\item{use_string}{same as the same argument in \link{newTabPlot}, controls
\code{vd_expr} and \code{pre_expr} in this function}
}
\value{
a special list that contains all info for a preprocess method
}
\description{
Given the same uploaded data set, users can choose different
ways to preprocess the data and therefore different preprocessing methods
will lead to different plot tab options
}
\details{
for \code{vd_expr}, \code{pre_expr} a variable called \emph{data_filtered} is
accessible and is the object where data stored. One should use this
object to do validation or preprocess. See examples.
}
\examples{
spsInit(change_wd = FALSE, overwrite = TRUE)
prepro_log <- makePrepro(
    "log", "take log of first column",
    vd_expr = spsValidate({
        if(!is.data.frame(data_filtered))
            stop("Input input data need to be a dataframe")
    }, vd_name = "log method pre-checks"),
    pre_expr = {
        if(is.numeric(data_filtered[ ,1]))
            {if(all(data_filtered[ ,1] > 0)){
                data_filtered[ ,1] <- log(data_filtered[ ,1])}
            }
        data_filtered
    },
    plot_options = c("plot_xx1", "plot_xx2")
    )
##### remember to save these helper functions in a R scripts under the R
##### folder. They will be automatically sourced when app starts.
myPreprocess <- function(data){
    if(is.numeric(data[ ,1]))
        data[ ,1] <- data[ ,1] + 1
    return(data)
}
myVd <- function(data, vd_name){
    spsValidate({
        if(!is.data.frame(data))
            stop("Input input data need to be a dataframe")
    }, vd_name = vd_name)
}
#####
prepro_addone <- makePrepro(
    "addone", "add one to first column",
    vd_expr = myVd(data_filtered, "add one method pre-checks"),
    pre_expr = myPreprocess(data_filtered),
    plot_options = c("plot_xx1")
)
newTabData("data_test1",  "test 1",
           app_path = glue("SPS_{format(Sys.time(), '\%Y\%m\%d')}"),
           prepro_methods = list(prepro_log, prepro_addone)
           )
}
