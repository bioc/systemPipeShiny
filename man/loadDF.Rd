% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spsCoreServer.R
\name{loadDF}
\alias{loadDF}
\title{Load tabular files as tibbles to server}
\usage{
loadDF(
  choice,
  df_init = NULL,
  upload_path = NULL,
  eg_path = NULL,
  comment = "#",
  delim = "\\t",
  col_types = vroom::cols(),
  ...
)
}
\arguments{
\item{choice}{where this file comes from, from 'upload' or example 'eg'?}

\item{df_init}{a tibble to return if \code{upload_path} or \code{eg_path} is not
provided. Return a 8x8 empty tibble if not provided}

\item{upload_path}{when \code{choice} is "upload", where to load the file, will
return \code{df_init} if this param is not provided}

\item{eg_path}{when \code{choice} is "eg", where to load the file, will
return \code{df_init} if this param is not provided}

\item{comment}{comment characters when load the file,
see help file of \code{vroom}}

\item{delim}{delimiter characters when load the file,
see help file of \code{vroom}}

\item{col_types}{columns specifications, see help file of \code{vroom}}

\item{...}{other params for vroom, see help file of \code{vroom}}
}
\value{
a tibble
}
\description{
load a file to server end. Designed to be used with the input
file source switch button. Use \code{vroom} to load the file. In SPS, this
function is usually combined with \code{dynamicFile()} function to help users
upload file and read the file. This loading function only works for parsing
tabular data, use \code{vroom()} internally.
}
\examples{
if(interactive()){
    library(shinyWidgets)
    ui <- fluidPage(
        shinyWidgets::radioGroupButtons(
            inputId = "data_source", label = "Choose your data file source:",
            selected = "upload",
            choiceNames = c("Upload", "Example"),
            choiceValues = c("upload", "eg")
        ),
        fileInput("df_path", label = "input file"),
        dataTableOutput("df")
    )

    server <- function(input, output, session) {
        tmp_file <- tempfile(fileext = ".csv")
        write.csv(iris, file = tmp_file)
        data_df <- reactive({
            loadDF(choice = input$data_source,
                   upload_path = input$df_path$datapath,
                   delim = ",", eg_path = tmp_file)
        })
        output$df <- renderDataTable(data_df())
    }
    shinyApp(ui, server)
}
}
