% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spsCoreServer.R
\name{spsValidate}
\alias{spsValidate}
\title{Validate expressions}
\usage{
spsValidate(
  expr,
  vd_name = "validation",
  pass_msg = glue("{vd_name} passed"),
  fail_msg = glue("{vd_name} failed"),
  shiny = TRUE,
  verbose = spsOption("verbose")
)
}
\arguments{
\item{expr}{the expression to validate data or other things. It should
return \code{TRUE} if pass or use \code{stop("your message")} if fail. Other types of
return are acceptable but not recommended. As long as it is not empty or
\code{FALSE} by the \code{emptyIsFalse()} function, it will return \code{TRUE}}

\item{vd_name}{validate title}

\item{pass_msg}{string, if pass, what message do you want to show}

\item{fail_msg}{string, optional, if your expression does not contain the
use of \code{stop()}  for failure and only returns \code{FALSE} or other empty values,
this message will show and generate \verb{shiny reactive stop}}

\item{shiny}{you can use this function outside shiny,
see \code{shinyCatch()} for more}

\item{verbose}{bool, show pass message? Default follows project verbose
setting}
}
\value{
If expression returns empty or \code{FALSE} make it \verb{shiny reactive stop}
and no final return, else \code{TRUE}.
}
\description{
this function is usually used on server side to validate input
dataframe or some expression
}
\examples{
spsOption("verbose", TRUE)
if(interactive()){
    ui <- fluidPage(
        useSps(),
        actionButton("vd1", "validate1"),
        actionButton("vd2", "validate2")
    )
    server <- function(input, output, session) {
        mydata <- datasets::iris
        observeEvent(input$vd1, {
            spsValidate({
                is.data.frame(mydata)
            }, vd_name = "Is df")
            print("continue other things")
        })
        observeEvent(input$vd2, {
            spsValidate({
                nrow(mydata) > 200
            }, vd_name = "more than 200 rows")
            print("other things blocked")
        })
    }
    shinyApp(ui, server)
}
# outside shiny example
mydata2 <- list(a = 1, b = 2)
spsValidate({(mydata2)}, "Not empty", shiny = FALSE)
try(spsValidate(is.data.frame(mydata2),
                "is dataframe?",
                shiny = FALSE),
    silent = TRUE)
}
\seealso{
\code{\link{shinyCatch}}, \code{\link{emptyIsFalse}}
}
